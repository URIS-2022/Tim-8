// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blockcore.Features.Wallet.UI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\_Imports.razor"
using Blockcore.UI.BlazorModal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Features.Wallet.AddressBook;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Features.Wallet.Api.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Features.Wallet.Exceptions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Features.Wallet.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Features.Wallet;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using NBitcoin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Connection.Broadcasting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Consensus.ScriptInfo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Consensus.TransactionInfo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Features.Wallet.Types;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
using Blockcore.Networks;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/walletsend/{walletname}/{accountname}")]
    public partial class WalletSend : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 196 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\WalletSend.razor"
 
    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }
 
    private string Address { get; set; }
    private decimal Amount { get; set; }
    private decimal Fee { get; set; }
    private string Password { get; set; }
    uint256 SentTransactionHash { get; set; }
    string TransactionHex { get; set; }
    string Alert { get; set; }
    string Success { get; set; }

 
    private List<AddressBookEntry> GetAddressBooks()
    {
        try
        {
            AddressBook addressBook = this.addressBookManager.GetAddressBook();

            if (addressBook != null)
            {
                return addressBookManager.GetAddressBook().Addresses.ToList();
            }
        }
        catch { }
        return new List<AddressBookEntry>();
    }

    protected override void OnInitialized()
    {
        this.Fee = new Money(this.Network.MinTxFee).ToDecimal(MoneyUnit.BTC);

        AddressBookNotification.AddressBookChanged += AddressBookChanged;
    }
    private async void AddressBookChanged(object sender, bool e)
    {
        await Task.Delay(10);
        try
        {
            StateHasChanged();
        }
        catch { }
    }
    public void EstimateFee(FeeType feeType = FeeType.Low)
    {
        if (string.IsNullOrEmpty(this.Address)) { this.Alert = "Please enter a valid address"; return; }
        if (this.Amount == 0) { this.Alert = "Please enter the number of coins you want to send"; return; }
        this.Alert = string.Empty;

        var recipients = new List<Recipient>();
        recipients.Add(new Recipient
            {
                ScriptPubKey = BitcoinAddress.Create(Address, this.Network).ScriptPubKey,
                Amount = new Money(Amount, MoneyUnit.BTC)
            });

        var context = new TransactionBuildContext(this.Network)
            {
                AccountReference = new WalletAccountReference(walletname, accountname),
                FeeType = feeType,
                Recipients = recipients,
                Sign = false
            };

        try
        {
            this.Fee = this.WalletTransactionHandler.EstimateFee(context).ToDecimal(MoneyUnit.BTC);
        }
        catch (NotEnoughFundsException nef)
        {
            if (nef.Missing is Money money)
            {
                var minFee = new Money(this.Network.MinTxFee).ToDecimal(MoneyUnit.BTC);
                this.Fee = Math.Max(minFee, money.ToDecimal(MoneyUnit.BTC));
            }
            else
            {
                this.Alert = nef.Message;
            }
        }
        catch (Exception ex)
        {
            this.Alert = ex.Message;
        }
    }
    public void SendMax()
    {
        if (string.IsNullOrEmpty(this.Address)) { this.Alert = "Please enter a valid address"; return; }
        this.Alert = string.Empty;

        var accountBalance = this.WalletManager.GetBalances(walletname, accountname).Single();

        this.Amount = accountBalance.AmountConfirmed.ToUnit(MoneyUnit.BTC);

        this.EstimateFee();

        this.Amount = this.Amount - this.Fee;
    }

    private bool IsSending { get; set; }
    private async Task callSendCoins()
    {
        IsSending = true;
        StateHasChanged();
        await Task.Delay(1);  // flush changes
        await SendCoins();
        IsSending = false;
        StateHasChanged();
        await Task.Delay(1);
    }

    private async Task SendCoins()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.Address)) { this.Alert = "Please enter a valid address"; return; }
        if (this.Amount == 0) { this.Alert = "Please enter the number of coins you want to send"; return; }
        if (this.Fee < Money.Satoshis(this.ConnectionManager.Network.MinTxFee).ToDecimal(MoneyUnit.BTC)) { this.Alert = $"The fee is lower than minimum ({ Money.Satoshis(this.ConnectionManager.Network.MinTxFee).ToDecimal(MoneyUnit.BTC)})"; return; }

        this.Alert = string.Empty;

        if (!this.ConnectionManager.ConnectedPeers.Any())
        {
            this.Alert = "No peers connected. You need connections before a transaction can be brodcast to the network.";
            return;
        }

        try
        {
            var recipients = new List<Recipient>();
            recipients.Add(new Recipient
                {
                    ScriptPubKey = BitcoinAddress.Create(Address, this.Network).ScriptPubKey,
                    Amount = new Money(Amount, MoneyUnit.BTC)
                });

            var context = new TransactionBuildContext(this.Network)
                {
                    AccountReference = new WalletAccountReference(walletname, accountname),
                    Shuffle = true, // We shuffle transaction outputs by default as it's better for anonymity.
                    WalletPassword = Password,
                    Recipients = recipients,
                    TransactionFee = new Money(this.Fee, MoneyUnit.BTC)
                };

            Transaction transactionResult = this.WalletTransactionHandler.BuildTransaction(context);

            this.SentTransactionHash = transactionResult.GetHash();
            this.TransactionHex = transactionResult.ToHex(this.Network.Consensus.ConsensusFactory);

            Transaction transaction = this.Network.CreateTransaction(this.TransactionHex);

            await this.BroadcasterManager.BroadcastTransactionAsync(transaction);

            var transactionBroadCastEntry = this.BroadcasterManager.GetTransaction(transaction.GetHash());

            if (transactionBroadCastEntry.TransactionBroadcastState == TransactionBroadcastState.FailedBroadcast)
            {
                this.Alert = "An error occurred: " + transactionBroadCastEntry.ErrorMessage;
                return;
            }
        }
        catch (Exception ex)
        {
            this.Alert = ex.Message;
            return;
        }
        this.Password = "";
        this.Address = "";
        this.Amount = 0;
        this.Fee = 0;
        this.Success = "Coins sent. TransactionID: " + this.SentTransactionHash;
    }

    private void RemoveAddress(string label, string walletName, string accountname)
    {
        ModalService.Show("Remove AddressBook", typeof(Modal.ModalAddressBookDelete), walletName + "|" + accountname + "|" + label);

    }

    private void addAddress(string walletName, string accountname)
    {
        ModalService.Show("Create New AddressBook", typeof(Modal.ModalAddressBookCreate), walletName + "|" + accountname);

    }

    private void NavigateToBroadcastTx(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletbroadcasttx/" + walletName + "/" + accountname);
    }
    private void NavigateToWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletview/" + walletName + "/" + accountname);
    }
    private void NavigateToReceiveWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletreceive/" + walletName + "/" + accountname);
    }
    private void NavigateToSendWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletsend/" + walletName + "/" + accountname);
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToWallet(selection, "account 0");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ModalService ModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAddressBookManager addressBookManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBroadcasterManager BroadcasterManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletTransactionHandler WalletTransactionHandler { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blockcore.Connection.IConnectionManager ConnectionManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Network Network { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletManager WalletManager { get; set; }
    }
}
#pragma warning restore 1591
