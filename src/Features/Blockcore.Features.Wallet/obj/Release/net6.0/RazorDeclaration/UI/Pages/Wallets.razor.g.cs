// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blockcore.Features.Wallet.UI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.Features.Wallet.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.Networks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.UI.BlazorModal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using NBitcoin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.Consensus.Chain;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.EventBus;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.EventBus.CoreEvents;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.EventBus.CoreEvents.Peer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.Features.Wallet.Events;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
using Blockcore.Signals;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/wallets")]
    public partial class Wallets : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 208 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Wallet\UI\Pages\Wallets.razor"
 
    private void NavigateToWallet(string walletName)
    {
        NavigationManager.NavigateTo("Accounts/" + walletName);
    }
    private void NavigateToWalletCreate()
    {
        NavigationManager.NavigateTo("walletcreate");
    }
    private void NavigateToWalletRecover()
    {
        NavigationManager.NavigateTo("walletrecover");
    }
    private void Resync()
    {
        this.WalletSyncManager.SyncFromHeight(1);
    }
    private async Task Rebroadcast()
    {
        foreach (string walletName in this.WalletManager.GetWalletsNames())
        {
            foreach (var unspentOutput in this.WalletManager.GetSpendableTransactionsInWallet(walletName, confirmations: 0))
            {
                if (unspentOutput.Confirmations == 0)
                {
                    var sent = await this.BroadcasterManager.BroadcastTransactionAsync(unspentOutput.Transaction.Id);

                    if (!sent)
                    {
                        if (!string.IsNullOrEmpty(unspentOutput.Transaction.Hex))
                        {
                            var trx = this.Network.Consensus.ConsensusFactory.CreateTransaction(unspentOutput.Transaction.Hex);
                            this.BroadcasterManager.BroadcastTransactionAsync(trx).GetAwaiter().GetResult();
                        }
                    }
                    else
                    {
                        var transaction = await this.PooledTransaction.GetTransaction(unspentOutput.Transaction.Id);
                        this.BroadcasterManager.BroadcastTransactionAsync(transaction).GetAwaiter().GetResult();
                    }
                }
            }
        }
    }
    private Dictionary<string, (Types.AccountBalance AccountBalance, string AccountName)> ReadWallets()
    {
        var walletBalances = new Dictionary<string, (Types.AccountBalance AccountBalance, string AccountName)>();

        foreach (var walletName in this.WalletManager.GetWalletsNames())
        {
            foreach (var account in this.WalletManager.GetAccounts(walletName))
            {
                var accountBalance = this.WalletManager.GetBalances(walletName, account.Name).Single();
                walletBalances.Add(walletName, (accountBalance, account.Name));
            }
        }

        return walletBalances;
    }
    private dynamic InSync()
    {
        decimal wt = (decimal)this.WalletSyncManager.WalletTip.Height;
        decimal ct = (decimal)this.ChainIndexer.Height;

        dynamic syncPercent = 0;
        syncPercent = (int)(((decimal)wt / (decimal)ct) * 100);
        return syncPercent;
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToWallet(selection);
    }
    private void ShowWalletRecover()
    {
        ModalService.Show("Recover your Wallet", typeof(Modal.ModalWalletRecover));
    }
    private void ShowWalletCreate()
    {
        ModalService.Show("Create your Wallet", typeof(Modal.ModalWalletCreate));
    }

    List<SubscriptionToken> subscriptionTokens;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && this.Signals != null)
        {
            this.subscriptionTokens = new List<SubscriptionToken>()
{
                this.Signals.Subscribe<TransactionFound>(this.ReloadEvent),
                this.Signals.Subscribe<TransactionSpent>(this.ReloadEvent),
            };
        }
    }

    DateTime lastRefresh = DateTime.UtcNow;

    private void ReloadEvent(object _)
    {
        if ((DateTime.UtcNow - lastRefresh).Seconds > 1)
        {
            lastRefresh = DateTime.UtcNow;

            InvokeAsync(this.StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (subscriptionTokens != null)
        {
            foreach (var subscriptionToken in subscriptionTokens)
            {
                subscriptionToken.Dispose();
            }
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISignals Signals { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ModalService ModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blockcore.Interfaces.IInitialBlockDownloadState InitialBlockDownloadState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPooledTransaction PooledTransaction { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Network Network { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBroadcasterManager BroadcasterManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletSyncManager WalletSyncManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ChainIndexer ChainIndexer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletManager WalletManager { get; set; }
    }
}
#pragma warning restore 1591
