// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blockcore.Features.Miner.UI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using BlockBlockcore.Features.Miner.UI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Consensus;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Features.Miner.Api.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Features.Wallet.Exceptions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Features.Wallet.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Features.Miner;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Features.Miner.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Features.Wallet.Types;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Networks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using NBitcoin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using Blockcore.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
using static System.Net.WebRequestMethods;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/mine")]
    public partial class Mine : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 122 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.Miner\UI\Pages\Mine.razor"
 
    Boolean MiningEnabled { get; set; }
    string StatusMining { get; set; }
    string Alert { get; set; }
    int BlockCount { get; set; }
    
    protected override void OnInitialized()
    {
        StatusMining = "Ready to Mine";
        Alert = "";
        MiningNotification.MiningChanged += MiningChanged;
        this.LoadStats();
    }
    private void MiningChanged(object sender, bool e)
    {
        MiningNotification.OnChangedStatus = e;
    }

    private Dictionary<string, (Money AmountConfirmed, Money AmountUnconfirmed)> ReadWallets()
    {
        var walletBalances = new Dictionary<string, (Money AmountConfirmed, Money AmountUnconfirmed)>();

        foreach (var walletName in this.walletManager.GetWalletsNames())
        {
            var items = this.walletManager.GetSpendableTransactionsInWalletForStaking(walletName, 1);

            var amountConfirmed = items.Where(s => s.Confirmations > 0).Sum(s => s.Transaction.Amount);
            var amountUnconfirmed = items.Where(s => s.Confirmations <= 0).Sum(s => s.Transaction.Amount);

            walletBalances.Add(walletName, (Money.Satoshis(amountConfirmed), Money.Satoshis(amountUnconfirmed)));
        }

        return walletBalances;
    }
   
    private readonly IConsensusManager consensusManager;
    public const string lastPowBlockExceededMessage = "This is a POS node and mining is not allowed past block {0}";
    public MinerSettings minerSettings;
  
    private async void LoadStats()
    {

        if (MiningNotification.OnChangedStatus == true)
        {
            StatusMining = "Mining...";
            IsStarting = true;
            StateHasChanged();
            return;
        }

        minerSettings = new MinerSettings(NodeSettings.Default(this.network));
        MiningEnabled = minerSettings.Mine;

        if (MiningEnabled)
        {
            try
            {
                if (!CheckBeforMine())
                {
                    return;
                }

                await StartMining();
            }
            catch { }
        }
    }
   
    private Boolean CheckBeforMine()
    {   
        if (this.initialBlockDownloadState.IsInitialBlockDownload() && this.walletManager.WalletTipHeight > 0)
        {
            Alert = "Chain Syncing. Please wait...";
            return false;
        }

        if (this.network.Consensus.IsProofOfStake && (this.walletManager.WalletTipHeight > this.network.Consensus.LastPOWBlock))
        {
            Alert = string.Format(lastPowBlockExceededMessage, this.network.Consensus.LastPOWBlock);
            return false;
        }

        if (minerSettings.BlockDefinitionOptions.BlockMaxSize <= 0)
        {
            Alert = "Invalid request \n " + "The number of blocks to mine must be higher than zero.";
            return false;
        }
     
        return true;
    }
   
    private async void StopMining()
    {
        await Task.Delay(1000);
        StatusMining = "Stop";
        Alert = "";
        IsStarting = false;
        this.powMining?.StopMining();
        MiningNotification.MiningChanged(this, false);
    }

    internal WalletAccountReference GetAccount()
    {
        string walletName = this.walletManager.GetWalletsNames().FirstOrDefault();
        HdAccount account = this.walletManager.GetAccounts(walletName).FirstOrDefault();
        var walletAccountReference = new WalletAccountReference(walletName, account.Name);
        return walletAccountReference;
    }

    private async Task Mining()
    {

        if (BlockCount <= 0) { this.Alert = " The number of blocks to mine must be higher than zero "; return; }

        if (!CheckBeforMine())
        {
            return;
        }

        MiningNotification.MiningChanged(this, true);
        StatusMining = "Mining...";
        IsStarting = true;
        try
        {
            StateHasChanged();
            await Task.Run(() => GenerateBlock());
            StateHasChanged();
        }
        catch
        {
            MiningNotification.MiningChanged(this, false);
            IsStarting = false;
            StatusMining = "Stop";
            return;
        }
        await Task.CompletedTask;
    }
    
    private void GenerateBlock()
    {
        try
        {
            WalletAccountReference accountReference = this.GetAccount();
            HdAddress address = this.walletManager.GetUnusedAddress(accountReference);
            var generateBlocksModel = new GenerateBlocksModel
                {
                    Blocks = this.powMining?.GenerateBlocks(new ReserveScript(address.Pubkey), (ulong)BlockCount, int.MaxValue)
                };
            if (StatusMining.ToLower() == "Stop".ToLower())
            {
                return;
            }

            IsStarting = false;
            StatusMining = "The mine was completed";
        }
        catch
        {

        }
    }
  
    private bool IsStarting { get; set; }
   
    private async Task StartMining()
    {
        IsStarting = true;
        StateHasChanged();
        await Task.Delay(1);  // flush changes
        await Mining();
        IsStarting = false;
        StateHasChanged();
        await Task.Delay(1);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInitialBlockDownloadState initialBlockDownloadState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Network network { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPowMining powMining { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MiningFeature miningFeature { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletManager walletManager { get; set; }
    }
}
#pragma warning restore 1591
