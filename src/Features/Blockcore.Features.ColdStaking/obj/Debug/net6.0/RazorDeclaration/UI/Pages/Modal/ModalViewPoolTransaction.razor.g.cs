// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blockcore.Features.ColdStaking.UI.Pages.Modal
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\Modal\ModalViewPoolTransaction.razor"
using Blockcore.UI.BlazorModal;

#line default
#line hidden
#nullable disable
    public partial class ModalViewPoolTransaction : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 108 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\Modal\ModalViewPoolTransaction.razor"
 
    bool ShowForm { get; set; } = true;
    string Alert { get; set; }

    int? StakingExpiryDays { get; set; }
    private void CloseModal()
    {
        ModalService.Close();
    }

    private void UpdateModal()
    {
        this.Alert = string.Empty;

        if (this.StakingExpiryDays == null)
        {
            this.Alert = "set expiry days";
            return;
        }

        var item = ((Blockcore.Features.ColdStaking.UI.Pages.ColdStakePoolView.AddressBalance)ModalService.Parameter);

        if (item.OutputType == "ColdStake")
        {
            item.HdAddress.StakingExpiry = DateTime.UtcNow.AddDays(this.StakingExpiryDays.Value).AddMinutes(10);
            item.StakingExpiry = item.HdAddress.StakingExpiry;
        }
        else
        {
            var expiry = item.HdAddress.RedeemScriptExpiry?.FirstOrDefault(r => r.RedeemScript == item.ColdstakeScript);

            if (expiry != null)
            {
                expiry.StakingExpiry = DateTime.UtcNow.AddDays(this.StakingExpiryDays.Value).AddMinutes(10);
                item.StakingExpiry = expiry.StakingExpiry;
            }
            else
            {
                if (item.HdAddress.RedeemScripts.FirstOrDefault(r => r == item.ColdstakeScript) == null)
                    throw new Exception("ColdstakeScript was expected but not found");

                if (item.HdAddress.RedeemScriptExpiry == null)
                    item.HdAddress.RedeemScriptExpiry = new List<Blockcore.Features.Wallet.Types.RedeemScriptExpiry>();

                expiry = new Blockcore.Features.Wallet.Types.RedeemScriptExpiry
                {
                    RedeemScript = item.ColdstakeScript,
                    StakingExpiry = DateTime.UtcNow.AddDays(this.StakingExpiryDays.Value).AddMinutes(10)
                };

                item.HdAddress.RedeemScriptExpiry.Add(expiry);
                item.StakingExpiry = expiry.StakingExpiry;
            }
        }

        this.StateHasChanged();
        this.CloseModal();
    }

	private void Submit()
	{
		ShowForm = false;
		this.Alert = "Update this message";
	}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ModalService ModalService { get; set; }
    }
}
#pragma warning restore 1591
