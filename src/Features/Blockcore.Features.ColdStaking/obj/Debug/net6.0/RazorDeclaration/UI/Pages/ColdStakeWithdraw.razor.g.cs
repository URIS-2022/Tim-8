// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blockcore.Features.ColdStaking.UI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\_Imports.razor"
using Blockcore.UI.BlazorModal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using Blockcore.Features.ColdStaking;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using Blockcore.Features.Wallet.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using NBitcoin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using Blockcore.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using Blockcore.Base.Deployments;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using Blockcore.Consensus.ScriptInfo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using Blockcore.Consensus.TransactionInfo;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
using Blockcore.Networks;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/coldstaking-withdraw/{walletname}")]
    public partial class ColdStakeWithdraw : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 152 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakeWithdraw.razor"
 
    ColdStakingManager ColdStakingManager;

    string Alert { get; set; }

    [Parameter]
    public string walletname { get; set; }

    private string Address { get; set; }

    private string Password { get; set; }

    private decimal Amount { get; set; }

    private decimal Fee { get; set; }

    public bool IsColdWalletAccount { get; set; }

    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;

        this.Fee = new Money(this.Network.MinTxFee).ToDecimal(MoneyUnit.BTC);

        return Task.CompletedTask;
    }

    private void GenerateAddress()
    {
        var result = this.WalletManager.GetUnusedAddress(new Wallet.Types.WalletAccountReference(this.walletname, "account 0"));

        this.Address = result.Address;
    }
    public void MaxAmount()
    {
        var accountBalance = this.WalletManager.GetBalances(walletname, "coldStakingColdAddresses").Single();
        this.Amount = accountBalance.AmountConfirmed.ToDecimal(MoneyUnit.BTC) - this.Fee;
    }

    private bool IsWithdrawing { get; set; }
    private async Task callWithdraw()
    {
        IsWithdrawing = true;
        StateHasChanged();
        await Task.Delay(1);  // flush changes
        await Withdraw();
        IsWithdrawing = false;
        StateHasChanged();
        await Task.Delay(1);
    }
    private async Task Withdraw()
    {
        if (string.IsNullOrEmpty(this.Password)) { this.Alert = "Please enter a password"; return; }
        if (string.IsNullOrEmpty(this.Address)) { this.Alert = "Please enter a withdrawal address"; return; }
        this.Alert = string.Empty;

        try
        {
            Transaction transaction = this.ColdStakingManager.GetColdStakingWithdrawalTransaction(
                this.WalletTransactionHandler,
                this.Address,
                this.walletname,
                this.Password,
                new Money(this.Amount, MoneyUnit.BTC),
                new Money(this.Fee, MoneyUnit.BTC));

            await this.BroadcasterManager.BroadcastTransactionAsync(transaction);

            var res = this.BroadcasterManager.GetTransaction(transaction.GetHash());

            if (res.TransactionBroadcastState == Connection.Broadcasting.TransactionBroadcastState.FailedBroadcast)
            {
                this.Alert = res.ErrorMessage;
                return;
            }

        }
        catch (Exception ex)
        {
            Alert = ex.Message;
            return;
        }
        //TODO: Add confirmation screen
        NavigationManager.NavigateTo("coldstakeview/" + walletname + "/coldStakingColdAddresses");
    }
    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }
    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
    private void NavigateToDelegate(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-delegate/" + walletName);
    }
    private void NavigateToColdStakeView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/coldStakingColdAddresses");
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToColdStakeView(selection);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NodeDeployments NodeDeployments { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IBroadcasterManager BroadcasterManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletTransactionHandler WalletTransactionHandler { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Network Network { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletManager WalletManager { get; set; }
    }
}
#pragma warning restore 1591
