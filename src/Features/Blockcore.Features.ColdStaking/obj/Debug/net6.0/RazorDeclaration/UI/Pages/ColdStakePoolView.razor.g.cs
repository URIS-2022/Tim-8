// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blockcore.Features.ColdStaking.UI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakePoolView.razor"
using Blockcore.Features.Wallet.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakePoolView.razor"
using NBitcoin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakePoolView.razor"
using Blockcore.Features.Wallet.Api.Controllers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakePoolView.razor"
using Blockcore.Features.Wallet.Api.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakePoolView.razor"
using Blockcore.Networks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakePoolView.razor"
using Blockcore.UI.BlazorModal;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/coldstakepoolview/{walletName}/{accountname}")]
    public partial class ColdStakePoolView : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 137 "C:\Users\PC\source\repos\50ti put URIS\src\Features\Blockcore.Features.ColdStaking\UI\Pages\ColdStakePoolView.razor"
       

    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }
    ColdStakingManager ColdStakingManager;
    protected override Task OnInitializedAsync()
    {
        ColdStakingManager = this.WalletManager as ColdStakingManager;
        return Task.CompletedTask;
    }

    public class AddressBalance
    {
        public string HotAddress;
        public string ColdAddress;
        public Money AmountConfirmed;
        public Money AmountUnconfirmed;
        public DateTime? StakingExpiry;
        public string OutputType;
        public Blockcore.Features.Wallet.Types.HdAddress HdAddress;
        public Blockcore.Consensus.ScriptInfo.Script ColdstakeScript;
    }

    public static string ParseDate(DateTime? dateTime)
    {
        if (dateTime == null)
        {
            return string.Empty;
        }

        if (DateTime.UtcNow > dateTime)
        {
            var totalDay = DateTime.UtcNow - dateTime;
            return $"{(int)totalDay.Value.TotalDays} days ago";
        }
        else
        {
            var totalDay = dateTime - DateTime.UtcNow;
            return $"in {(int)totalDay.Value.TotalDays} days";
        }
    }

    private Dictionary<string, AddressBalance> GetAddressesWithBalances(string walletName)
    {
        var entries = new Dictionary<string, AddressBalance>();

        var inputs = this.ColdStakingManager.GetUnspentTransactionsInWallet(walletName, 0, a => a.Index == ColdStakingManager.HotWalletAccountIndex);

        foreach (var input in inputs)
        {
            Blockcore.Consensus.ScriptInfo.Script coldstakeScript = null;
            DateTime? stakingExpiry = null;
            string outputType;

            if (Blockcore.Consensus.ScriptInfo.PayToScriptHashTemplate.Instance.CheckScriptPubKey(input.Transaction.ScriptPubKey) ||
                Blockcore.Consensus.ScriptInfo.PayToWitScriptHashTemplate.Instance.CheckScriptPubKey(input.Transaction.ScriptPubKey))
            {
                if (input.Address.RedeemScripts == null)
                    throw new Exception("Wallet has no redeem scripts");

                coldstakeScript = input.Address.RedeemScripts.FirstOrDefault(r => r.Hash.ScriptPubKey == input.Transaction.ScriptPubKey || r.WitHash.ScriptPubKey == input.Transaction.ScriptPubKey);
                if (input.Address.RedeemScriptExpiry != null)
                {
                    stakingExpiry = input.Address.RedeemScriptExpiry.FirstOrDefault(r => r.RedeemScript == coldstakeScript)?.StakingExpiry ?? null;
                }

                if (coldstakeScript.Hash.ScriptPubKey == input.Transaction.ScriptPubKey)
                    outputType = "P2SH";
                else
                    outputType = "P2WSH";
            }
            else
            {
                coldstakeScript = input.Transaction.ScriptPubKey;
                stakingExpiry = input.Address.StakingExpiry;
                outputType = "ColdStake";
            }

            Blockcore.Consensus.ScriptInfo.ColdStakingScriptTemplate.Instance.ExtractScriptPubKeyParameters(coldstakeScript, out KeyId hotPubKeyHash, out KeyId coldPubKeyHash);
            if (hotPubKeyHash != null && coldPubKeyHash != null)
            {
                var hotAddress = hotPubKeyHash.GetAddress(this.Network).ToString();
                var coldAddress = coldPubKeyHash.GetAddress(this.Network).ToString();
                if (entries.TryGetValue($"{hotAddress}-{coldAddress}", out AddressBalance entry))
                {
                    entry.AmountConfirmed += input.Transaction.IsConfirmed() ? input.Transaction.Amount : 0;
                    entry.AmountUnconfirmed += !input.Transaction.IsConfirmed() ? input.Transaction.Amount : 0;
                }
                else
                {
                    entries.Add($"{hotAddress}-{coldAddress}", new AddressBalance
                        {
                            HotAddress = hotAddress,
                            ColdAddress = coldAddress,
                            AmountConfirmed = input.Transaction.IsConfirmed() ? input.Transaction.Amount : 0,
                            AmountUnconfirmed = !input.Transaction.IsConfirmed() ? input.Transaction.Amount : 0,
                            StakingExpiry = stakingExpiry,
                            OutputType = outputType,
                            HdAddress = input.Address,
                            ColdstakeScript = coldstakeScript
                        });
                }
            }
            else
            {
                // this is not suppose to happen unless coins are sent to an address of hot account by mistake

                entries.Add($"{input.Transaction.OutPoint}", new AddressBalance
                    {
                        HotAddress = "na",
                        ColdAddress = "na",
                        AmountConfirmed = input.Transaction.IsConfirmed() ? input.Transaction.Amount : 0,
                        AmountUnconfirmed = !input.Transaction.IsConfirmed() ? input.Transaction.Amount : 0,
                        OutputType = Network.StandardScriptsRegistry.GetTemplateFromScriptPubKey(input.Transaction.ScriptPubKey)?.Type.ToString(),
                    });
            }
        }

        return entries;
    }

    private void NavigateToEnableWallet()
    {
        NavigationManager.NavigateTo("coldstaking-enablewallet");
    }
    private void NavigateToWithdraw(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-withdraw/" + walletName);
    }

    private void NavigateToSetup(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-setup/" + walletName);
    }
    private void NavigateToDelegate(string walletName)
    {
        NavigationManager.NavigateTo("coldstaking-delegate/" + walletName);
    }

    private void ViewTransaction(AddressBalance addressBalance)
    {
        ModalService.Show("Transaction Details", typeof(Modal.ModalViewPoolTransaction), addressBalance);
        ModalService.OnClose += () =>
        {
            this.StateHasChanged();
        };
    }
    private void NavigateToColdStakeView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakeview/" + walletName + "/coldStakingColdAddresses");
    }
    private void NavigateToColdStakeHotReceiveView(string walletName)
    {
        NavigationManager.NavigateTo("coldstakereceive/" + walletName + "/coldStakingHotAddresses");
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToColdStakeView(selection);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ModalService ModalService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Network Network { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWalletManager WalletManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
